<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAgILGxsbcwYG
        BlcAAAAWAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgo
        KIFhYWH/Q0ND5wkJCV4AAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAgAA
        AAAaGhpZYmJi+nh4eP9qamr/ISEhhQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAA
        AAkAAAAJDQ0NQ1paWuuBgYH/fHx8/09PT9oICAgnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAgAAAAKAAAACwAAAAoAAAAGAAAAAQAA
        AAAAAAAGAAAAFQMDAz1JSUnYfn5+/4SEhP9hYWHyEhISSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAABsEBAQ+DQ0NXRAREW0NDQ1oBQUFVAAA
        ADkAAAAYAAAACAEBARAICAg7KioqpnFxcf+IiIj/dHR0/y0tLZEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQkJCTYkJSWMPT9Ayk9RU+5VVlj7VlZW/VNU
        VfxMTlHyPD4/1SYmJ6gJCQleGxsbhVBQUPJXV1f+bm5u/319ff9ERETMAgICKAAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAhYpKSqKVFVX7Gtqaf95cWf/hndk/5SD
        bP+cinP/mYly/4p8aP91a17/X11b/0tMT/U/P0D6Wlpa/2RkZP9eXl7/RkZG3QYGBloAAAAWAAAABQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALCwsqREVGxG5vb/+EeWr/l4Fl/6iP
        bv+7o3v8zraK8tzGnerjz6zw5tW5+9zNtP+4poz/gHNg/1lYV/9UVVf/XV1d/2BgYP8xMTGyAAAALwAA
        ABMAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwsLJVJTVNV8enb/kn9l/5qC
        ZP+tj2vsyp9svt+pbJnlq2qJ56tohuisa4flr3KV6L+PtO/avuTn2sT/p5R4/2FcVv9PUFL/SEhI/h4e
        HocAAAAaAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBA5LS03AgX98/5WA
        Y/+Vf2L+tpFnzd+papHssm2B7LJvg+uxb4XrsW+G67FuhuuxbYTrrmmA5axpiOfDl7zy5tH6taKD/2Rf
        WP9GSEn3BgYGZwAAABYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALCwscX1+
        f/+Vgmj/kX1g/7eSZsrlr2+M6rRziumzc43os3ON6LNzjeiyc43osnON6LJzjeizc43psnKL5q5qheK7
        iLTz6dX/pJF1/1xbWv8pKiu3AAAAKgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUF
        BQ1fYGLVkYl//5aBZP+njGrl3a10m+q4fJHpt3uT6bd7k+m3e5Ppt3uT6bd7k+m3e5Pot3uT6Ld7k+i2
        e5PotnuS5bFzjejPrNHf0bn/eW5e/0pLTfMICAhdAAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAJycnWoeHh/+cinL/oItw+s6nebPpu4WW6LuGmei7hZnou4WZ6LuFmei7hZnou4WZ6LuFmei7
        hZnou4WZ57uFmee6hZnouoSW4raBnvDhy++yooj/X11b/yQkJacAAAAXAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABSU1SnmpSN/6aQdv+5nn3f37eIo+m/j57ovo+f6L+Pn+i/j5/ov4+f6L+Pn+i/
        j5/ovo+f6L6Pn+i+jp/nvo6f572On+a9jp/muoia5suoydvNuP91bGD/PT9A2wEBATgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAABAQECnZ4edukmIn/taKH/8qsh8rmwJWl6MKXpujCl6bowpem6MKXpujC
        l6bowpem6MKXpujCl6bowpam6MKWpufBlqbnwZWm5sGWpubAlKPiwJiy5tnD/I6Bb/9PUFL6CAgIWAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVFRUgiYqM9a2fjf/Ds5b90LSQwubEnqvmxZ6t5sWerebF
        nq3mxZ6t5sWerebFnq3mxZ6t58WerebFnq3mxJ2t5sSdreXEna3kw5yt5MOcrOLAma7j1b/woZJ//1dW
        Vv8TExNzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwcHDCUlJT5t6mW/8/Dq/nSt5fF5cilsuXI
        pbPlyKWz5sils+bIpbPmyKWz5sils+bJpbPlyKWz5cils+TIpbPkyKSz5Meks+PGo7PjxqOy4cOfs9zO
        t+uklYH/W1pY/xYWFn0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHR0dLZqZmfm8r57/2dC8+tG6
        nMrly6m35MqquOTKqrjlyqq45cuquOXLqrjly6q45cqquOTKqrjkyqq45MqpuOPJqbjjyai448mouOLI
        p7fhxqW41Met7aCSfv9cW1n/FRUWegAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVFRUamJma9L2y
        ov/l3c7+0b2i0+HLrL/jza6+5M2vvuPNr77jza++482vvuPNr77jza++5M2uvuPNrr7jzK6+48ytvuLL
        rb7iy62+4sqsvd/Jq8HIvKL1mo17/1paWv8TExNoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMD
        AwiOj5HVvrSo/+nj2P/UxrHi3MityOPQtcTj0LXF49C1xePPtMXjz7TF48+0xePQtcXj0LTF48+0xeLO
        s8XizrPF4c2yxeDNssXhzbLC2siuz7utmf6PhHf/UlNV9QgICEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAGZmZ5vAu7b/4NfJ/+Pd0fPTw6nV4tG4y+LSucvi0rnL4tK5y+LSucvi0rnL4tK5y+LS
        ucvi0bjL4dG4y+HRuMvg0LfL4NC2yuHQt8nLv6rmr6CP/4B7dP8/QEHPAAAAGgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAALi4vR7y9vf/LwbL/9fPt/tPItefbzbbV4dS+0eHUvdHh1L3R4dS90eHU
        vdHh1L3R4dS90eHUvdHg07zR4NO80d/Su9Hf0rvQ2s232Lmtn/ull4j/bGtr/yIiIoYAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQAEiYmKwcjDvf/j3M//7+zm+tLFsOXd0Lrb4dO+2OHU
        vtjh077Y4NO+2OHTvdjg073Y4NO92ODSvNjf0rzY39G7193PudrEuKj0s6SV/4yFfv9OTlDlBQUFKwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtLS1Dx8jJ/8S6q//18ef/6ePb+dLB
        qujczLTh4M+43uHQuN7gz7je4M+33uDPt97fzrfe38223t7Ntt7cyrPgzL2q87ipmv+mmIr/amts/yMj
        JH0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1dXah0dHP/83A
        rf/49Ov/6+Ta+djGr+/Yw6ro3ciw5N7KsuPeybHj3smx493IsOPbxq/k2cWt6dDArPXBsaD/s6OR/4B+
        fP9FRkfKBAQEGQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYG
        Bg2CgoO00dDO/8u/rf/t49P/+PLq/+ne0frfzbj02sWu8drErfDaxa3x28eu8t7MtPfayLP9zLmj/7Gh
        kf+EgoD/UVJT1QsLCysAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAUFBQxvb3CbxsbG/8nAtf/Tw6//6tzJ//Tq3P/269r/9OfT//Lkyv/t3cD/4cuy/8ay
        nv+jmY//fn9//0lJSrkLCwsjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7OztVlZeYzLy7u//Bu7P/w7eo/8e4pv/FtKL/wrGf/7ao
        mv+jnJb/ioqK/2NlZtotLS1uAgICBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBgYIMTEyTWNkZZaEhYfIjI6Q54iK
        jPGAgoXqcXN1z1FSU58qKytcBwcHEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAQEBAQQBQUFFAQEBBMCAgIJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////5////4P///+D///5A///8Af/8BAP/8AAH/8AAA/+AAAP/AAAD/gA
        AB/wAAAf8AAAP+AAAB/gAAAf4AAAH8AAAB/AAAAfwAAAH8AAAB/AAAAfwAAAH+AAAB/gAAAf4AAAP/AA
        AH/4AAB/+AAA//wAAf//AAP//4AP///wf/8=
</value>
  </data>
</root>